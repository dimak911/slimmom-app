//Core
import React, { useState } from 'react';
import PropTypes from 'prop-types';
//Packages
import debounce from 'lodash.debounce';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
//Redux
import { productHooks } from '../../redux/dairyFormHooks/product.hook';
import { productOperations } from '../../redux/dairyFormHooks/productOperations';
//Utils
import { productSchema } from '../../helpers/validationSchema';
//Styles
import { FormWrap, Form } from './DiaryAddProductForm.styled';
import {
  Label,
  Input,
  Message,
  BtnWrap,
  Button,
} from './DiaryAddProductForm.styled';
import {
  ProductListWrap,
  ProductList,
  ProductItem,
} from './DiaryAddProductForm.styled';

const DiaryAddProductForm = ({ isOpen, onSubmit, onCloseModal }) => {
  const { register, reset, handleSubmit, setValue, getValues, errors } =
    useForm({
      resolver: yupResolver(productSchema),
    });

  const { items } = productHooks.useProductState();

  const [product, setProduct] = useState(null);

  const clearProductList = productHooks.useProductEmptyAction(
    productOperations.clearProductList
  );

  const handleSelectProduct = product => {
    setValue('product', product.title.en);
    setProduct(product);
    clearProductList();
  };

  const searchProduct = productHooks.useProductAction(
    productOperations.findProducts
  );

  const debouncedSearch = debounce(
    query => query.length > 2 && searchProduct({ query }),
    400
  );
  const handleChangeProduct = ({ target: { value } }) => debouncedSearch(value);

  const handleFormSubmit = () => {
    onSubmit({ productId: product.id, weight: getValues('weight') });
    reset();
  };

  return (
    <FormWrap>
      <Form onSubmit={handleSubmit(handleFormSubmit)}>
        <Label>
          <Input
            type="text"
            name="product"
            autoComplete="off"
            ref={register}
            onChange={handleChangeProduct}
            placeholder="Введіть назву продукту"
          />
          {<Message>{errors.product?.message}</Message>}
        </Label>

        <ProductListWrap>
          <ProductList>
            {!!items.length &&
              items.map(product => (
                <ProductItem
                  key={product.id}
                  onClick={() => handleSelectProduct(product)}
                >
                  {product.title.en}
                </ProductItem>
              ))}
          </ProductList>
        </ProductListWrap>

        <Label>
          <Input
            type="number"
            name="weight"
            autoComplete="off"
            ref={register({ setValueAs: v => Number(v) })}
            placeholder="Грами"
          />
          {<Message>{errors.weight?.message}</Message>}
        </Label>

        <BtnWrap>
          <Button type="submit" />
        </BtnWrap>
      </Form>
    </FormWrap>
  );
};

DiaryAddProductForm.propTypes = {
  onSubmit: PropTypes.func.isRequired,
  isOpen: PropTypes.bool.isRequired,
};

export default DiaryAddProductForm;
